const { Client, GatewayIntentBits, SlashCommandBuilder, EmbedBuilder, AttachmentBuilder } = require('discord.js');
const { createCanvas } = require('canvas');
const JsBarcode = require('jsbarcode');

// Bot configuration
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
    ]
});

// Required role name
const REQUIRED_ROLE = 'Paid Sainsburys';

// Function to check if user has required role
function hasRequiredRole(member) {
    return member.roles.cache.some(role => role.name === REQUIRED_ROLE);
}

// Utility functions
function padLeft(str, length) {
    return str.toString().padStart(length, '0');
}

function calculateCheckDigit(input) {
    let sum = 0;
    for (let i = 0; i < input.length; i++) {
        const digit = parseInt(input[input.length - 1 - i], 10);
        const weight = (i % 2 === 0) ? 3 : 1;
        sum += digit * weight;
    }
    return (10 - (sum % 10)) % 10;
}

function generateBarcodeImage(productCode, priceInPence) {
    try {
        // Validate inputs
        if (!productCode || productCode.length < 8) {
            throw new Error("Barcode must be at least 8 digits long");
        }
        
        if (priceInPence < 1 || priceInPence > 99999) {
            throw new Error("Price must be between 1p and ¬£999.99");
        }

        // Process barcode
        const numericProduct = productCode.replace(/\D/g, '');
        let productDigits = numericProduct.length === 14 ? numericProduct.slice(0, -1) : numericProduct;
        productDigits = padLeft(productDigits, 13);

        const paddedPrice = padLeft(priceInPence, 6);
        const baseNumber = `91${productDigits}${paddedPrice}`;
        const checkDigit = calculateCheckDigit(baseNumber);
        const fullBarcode = `${baseNumber}${checkDigit}`;

        // Create canvas
        const canvas = createCanvas(400, 150);
        const ctx = canvas.getContext('2d');

        // Fill white background
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, 400, 150);

        // Generate barcode
        JsBarcode(canvas, fullBarcode, {
            format: "CODE128",
            displayValue: true,
            fontSize: 14,
            width: 2.5,
            height: 80,
            margin: 10,
            background: "#ffffff",
            lineColor: "#000000"
        });

        // Add Sainsbury's watermark
        ctx.fillStyle = '#666';
        ctx.font = '10px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('Generated by Sainsbury\'s Bot', 200, 145);

        return {
            buffer: canvas.toBuffer('image/png'),
            barcode: fullBarcode,
            price: priceInPence
        };
    } catch (error) {
        throw error;
    }
}

// Slash command registration
const commands = [
    new SlashCommandBuilder()
        .setName('barcode')
        .setDescription('Generate a Sainsbury\'s style barcode')
        .addStringOption(option =>
            option.setName('product_code')
                .setDescription('Product barcode (8-13 digits)')
                .setRequired(true)
        )
        .addIntegerOption(option =>
            option.setName('price')
                .setDescription('Price in pence (e.g., 100 for ¬£1.00)')
                .setRequired(true)
                .setMinValue(1)
                .setMaxValue(99999)
        ),
    
    new SlashCommandBuilder()
        .setName('quickcode')
        .setDescription('Quick barcode with preset prices')
        .addStringOption(option =>
            option.setName('product_code')
                .setDescription('Product barcode (8-13 digits)')
                .setRequired(true)
        )
        .addStringOption(option =>
            option.setName('preset_price')
                .setDescription('Choose a preset price')
                .setRequired(true)
                .addChoices(
                    { name: '10p', value: '10' },
                    { name: '49p', value: '49' },
                    { name: '¬£1.00', value: '100' },
                    { name: '¬£2.00', value: '200' },
                    { name: '¬£5.00', value: '500' }
                )
        ),
    
    new SlashCommandBuilder()
        .setName('help')
        .setDescription('Show help information for the barcode bot')
];

// Bot ready event
client.once('clientReady', async () => {
    console.log(`ü§ñ Sainsbury's Barcode Bot is online as ${client.user.tag}!`);
    
    // Register slash commands
    try {
        console.log('Started refreshing application (/) commands.');
        await client.application.commands.set(commands);
        console.log('Successfully reloaded application (/) commands.');
    } catch (error) {
        console.error('Error registering commands:', error);
    }
    
    // Set bot status
    client.user.setActivity('Generating barcodes | /barcode', { type: 'PLAYING' });
});

// Handle slash commands
client.on('interactionCreate', async interaction => {
    if (!interaction.isChatInputCommand()) return;

    const { commandName, options } = interaction;

    try {
        // Check if user has required role (skip check for help command)
        if (commandName !== 'help') {
            const member = interaction.member;
            
            if (!member || !hasRequiredRole(member)) {
                const noPermissionEmbed = new EmbedBuilder()
                    .setTitle('üîí Access Denied')
                    .setDescription(`**You need the "${REQUIRED_ROLE}" role to use this bot!**\n\nContact a server administrator to get access.`)
                    .setColor(0xdc3545)
                    .setFooter({ 
                        text: 'Sainsbury\'s Barcode Generator', 
                        iconURL: client.user.displayAvatarURL() 
                    })
                    .setTimestamp();

                await interaction.reply({ embeds: [noPermissionEmbed], ephemeral: true });
                return;
            }
        }

        if (commandName === 'barcode') {
            await interaction.deferReply();

            const productCode = options.getString('product_code');
            const price = options.getInteger('price');

            const result = generateBarcodeImage(productCode, price);
            
            const priceFormatted = (price / 100).toLocaleString('en-GB', {
                style: 'currency',
                currency: 'GBP'
            });

            const embed = new EmbedBuilder()
                .setTitle('üè∑Ô∏è Sainsbury\'s Barcode Generator')
                .setDescription(`**Barcode Generated Successfully!**`)
                .addFields(
                    { name: 'Product Code', value: `\`${productCode}\``, inline: true },
                    { name: 'Price', value: priceFormatted, inline: true },
                    { name: 'Full Barcode', value: `\`${result.barcode}\``, inline: false }
                )
                .setColor(0xf47738)
                .setFooter({ 
                    text: 'Sainsbury\'s Barcode Generator', 
                    iconURL: client.user.displayAvatarURL() 
                })
                .setTimestamp()
                .setImage('attachment://barcode.png');

            const attachment = new AttachmentBuilder(result.buffer, { name: 'barcode.png' });

            await interaction.editReply({ 
                embeds: [embed], 
                files: [attachment] 
            });

        } else if (commandName === 'quickcode') {
            await interaction.deferReply();

            const productCode = options.getString('product_code');
            const presetPrice = parseInt(options.getString('preset_price'));

            const result = generateBarcodeImage(productCode, presetPrice);
            
            const priceFormatted = (presetPrice / 100).toLocaleString('en-GB', {
                style: 'currency',
                currency: 'GBP'
            });

            const embed = new EmbedBuilder()
                .setTitle('‚ö° Quick Barcode Generated')
                .setDescription(`**Generated with preset price!**`)
                .addFields(
                    { name: 'Product Code', value: `\`${productCode}\``, inline: true },
                    { name: 'Price', value: priceFormatted, inline: true },
                    { name: 'Full Barcode', value: `\`${result.barcode}\``, inline: false }
                )
                .setColor(0x28a745)
                .setFooter({ 
                    text: 'Sainsbury\'s Barcode Generator', 
                    iconURL: client.user.displayAvatarURL() 
                })
                .setTimestamp()
                .setImage('attachment://barcode.png');

            const attachment = new AttachmentBuilder(result.buffer, { name: 'barcode.png' });

            await interaction.editReply({ 
                embeds: [embed], 
                files: [attachment] 
            });

        } else if (commandName === 'help') {
            const embed = new EmbedBuilder()
                .setTitle('ü§ñ Sainsbury\'s Barcode Bot Help')
                .setDescription('Generate Sainsbury\'s style barcodes with custom pricing!')
                .addFields(
                    { 
                        name: 'üîí Access Required', 
                        value: `You need the **"${REQUIRED_ROLE}"** role to use barcode generation commands.`, 
                        inline: false 
                    },
                    { 
                        name: 'üìã Commands', 
                        value: '`/barcode` - Generate custom barcode\n`/quickcode` - Quick generation with presets\n`/help` - Show this help message', 
                        inline: false 
                    },
                    { 
                        name: 'üè∑Ô∏è /barcode', 
                        value: 'Generate a barcode with custom price\n**Usage:** `/barcode product_code:1234567890123 price:100`', 
                        inline: false 
                    },
                    { 
                        name: '‚ö° /quickcode', 
                        value: 'Quick generation with preset prices (10p, 49p, ¬£1, ¬£2, ¬£5)\n**Usage:** `/quickcode product_code:1234567890123 preset_price:¬£1.00`', 
                        inline: false 
                    },
                    { 
                        name: 'üìù Notes', 
                        value: '‚Ä¢ Product code must be 8-13 digits\n‚Ä¢ Price in pence (100 = ¬£1.00)\n‚Ä¢ Max price: ¬£999.99\n‚Ä¢ Only users with "Paid Sainsburys" role can generate barcodes', 
                        inline: false 
                    }
                )
                .setColor(0xdc3545)
                .setFooter({ 
                    text: 'Sainsbury\'s Barcode Generator ‚Ä¢ Discord Bot', 
                    iconURL: client.user.displayAvatarURL() 
                })
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
        }

    } catch (error) {
        console.error('Command error:', error);
        
        const errorEmbed = new EmbedBuilder()
            .setTitle('‚ùå Error')
            .setDescription(`**Error:** ${error.message}`)
            .setColor(0xdc3545)
            .setFooter({ text: 'Sainsbury\'s Barcode Generator' })
            .setTimestamp();

        if (interaction.deferred) {
            await interaction.editReply({ embeds: [errorEmbed] });
        } else {
            await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }
    }
});

// Error handling
client.on('error', console.error);

process.on('unhandledRejection', (reason, promise) => {
    console.log('Unhandled Rejection at:', promise, 'reason:', reason);
});

// Login with token from environment variable
client.login(process.env.DISCORD_TOKEN);
